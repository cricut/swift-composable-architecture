{"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs"},{"type":"text","text":" "},{"type":"text","text":"observation tools, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" we have backported those tools to work in iOS 13 and later. Using the"},{"type":"text","text":" "},{"type":"text","text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be"},{"text":" ","type":"text"},{"type":"text","text":"aware of."}]},{"text":"The Perception framework","type":"heading","level":2,"anchor":"The-Perception-framework"},{"inlineContent":[{"text":"The Composable Architecture comes with a framework known as Perception, which is our backport of","type":"text"},{"type":"text","text":" "},{"text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the","type":"text"},{"type":"text","text":" "},{"text":"Observation framework there is a corresponding tool in Perception.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, instead of the "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" macro, there is the "},{"code":"@Perceptible","type":"codeVoice"},{"type":"text","text":" macro:"}]},{"type":"codeListing","syntax":"swift","code":["@Perceptible","class CounterModel {","  var count = 0","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must"},{"type":"text","text":" "},{"type":"text","text":"remember to wrap the contents of your view in the "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":" view:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"]},{"inlineContent":[{"type":"text","text":"This will make sure that the view subscribes to any fields accessed in the "},{"code":"@Perceptible","type":"codeVoice"},{"text":" model so","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that changes to those fields invalidate the view and cause it to re-render."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a field of a "},{"code":"@Percetible","type":"codeVoice"},{"type":"text","text":" model is accessed in a view while "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" inside"},{"type":"text","text":" "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":", then a runtime warning will be triggered:"}]},{"name":"üü£ Runtime Warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Perceptible state was accessed but is not being tracked. Track changes to"},{"type":"text","text":" "},{"type":"text","text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view."}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack"},{"type":"text","text":" "},{"type":"text","text":"frames displayed to find the line in your view where you are accessing state without being inside"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}]},{"anchor":"Bindings","level":2,"type":"heading","text":"Bindings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to derive bindings from the store (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","isActive":true},{"type":"text","text":" for more information), then you"},{"text":" ","type":"text"},{"type":"text","text":"would typically use the "},{"type":"codeVoice","code":"@Bindable"},{"text":" property wrapper that comes with SwiftUI:","type":"text"}]},{"syntax":"swift","code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"However, ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" is iOS 17+. So, the Perception library comes with a tool that can be used in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"its place until you can target iOS 17 and later. You just have to qualify "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" with the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Perception"},{"type":"text","text":" namespace:"}],"type":"paragraph"},{"code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Gotchas","level":2,"text":"Gotchas","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"There are a few gotchas to be aware of when using ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}]},{"type":"heading","text":"Lazy view closures","level":3,"anchor":"Lazy-view-closures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and"},{"type":"text","text":" "},{"type":"text","text":"not necessarily in the same stack frames as the "},{"type":"codeVoice","code":"body"},{"text":" of the view. For example, the trailing","type":"text"},{"text":" ","type":"text"},{"text":"closure of ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" is called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"type":"text","text":" the "},{"code":"body","type":"codeVoice"},{"text":" of the view has been computed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that even if you wrap the body of the view in "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"]},{"inlineContent":[{"type":"text","text":"‚Ä¶the access to the row‚Äôs "},{"type":"codeVoice","code":"store.title"},{"type":"text","text":" happens "},{"inlineContent":[{"text":"outside","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":", and hence will","type":"text"},{"type":"text","text":" "},{"text":"not work and will trigger a runtime warning as described above.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The fix for this is to wrap the content of the trailing closure in another ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"Mixing legacy and modern features together","anchor":"Mixing-legacy-and-modern-features-together"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", and features built in the ‚Äúmodern‚Äù style, using the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"type":"text","text":" macro. The problems mostly manifest themselves as re-computing view bodies"},{"type":"text","text":" "},{"type":"text","text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what"},{"text":" ","type":"text"},{"type":"text","text":"state changed, and can cause glitches or exacerbate navigation bugs."}]},{"inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","isActive":true},{"type":"text","text":" for more information about this."}],"type":"paragraph"}],"kind":"content"}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"},"metadata":{"title":"Observation backport","roleHeading":"Article","role":"article","modules":[{"name":"ComposableArchitecture"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"title":"Integrations","anchor":"Integrations","generated":true}],"variants":[{"paths":["\/documentation\/composablearchitecture\/observationbackport"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"type":"topic","title":"UIKit Integration","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"kind":"article","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"title":"Incrementally migrating","url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","kind":"section","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"deprecated":true,"url":"\/documentation\/composablearchitecture\/withviewstore","title":"WithViewStore","kind":"symbol","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"text":"A view helper that transforms a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" into a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"text":"A ","type":"text"},{"code":"ViewStore","type":"codeVoice"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/viewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","role":"symbol","deprecated":true,"type":"topic","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewStore","kind":"identifier"}],"title":"ViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","url":"\/documentation\/composablearchitecture\/store","title":"Store","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","title":"Working with SwiftUI bindings","abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}],"url":"\/documentation\/composablearchitecture\/bindings","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"title":"ObservableState()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","url":"\/documentation\/composablearchitecture\/observablestate()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"},{"kind":"text","text":"()"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency."}],"role":"article","title":"Adopting Swift concurrency","kind":"article","url":"\/documentation\/composablearchitecture\/swiftconcurrency","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"title":"SwiftUI Integration","type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","type":"topic","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]}}}