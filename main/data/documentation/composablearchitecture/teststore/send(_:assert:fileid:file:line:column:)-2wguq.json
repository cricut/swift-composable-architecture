{"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-2wguq"]}],"kind":"symbol","abstract":[{"text":"Sends an action to the store and asserts when state changes.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@discardableResult"},{"text":" ","kind":"text"},{"text":"@","kind":"attribute"},{"kind":"attribute","preciseIdentifier":"s:ScM","text":"MainActor"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"action","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"updateStateToExpectedResult"},{"text":": ((","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")? = nil, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":" = "},{"text":"#fileID","kind":"keyword"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"filePath","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":" = "},{"text":"#filePath","kind":"keyword"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":" = ","kind":"text"},{"text":"#line","kind":"keyword"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":" = "},{"text":"#column","kind":"keyword"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"TestStoreTask","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"action","content":[{"inlineContent":[{"text":"An action.","type":"text"}],"type":"paragraph"}]},{"name":"updateStateToExpectedResult","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that asserts state changed by sending the action to"},{"type":"text","text":" "},{"text":"the store. The mutable state sent to this closure must be modified to match the state of","type":"text"},{"type":"text","text":" "},{"text":"the store after processing the given action. Do not provide a closure if no change is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expected."}]}]},{"content":[{"inlineContent":[{"text":"The fileID.","type":"text"}],"type":"paragraph"}],"name":"fileID"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The filePath."}]}],"name":"filePath"},{"name":"line","content":[{"type":"paragraph","inlineContent":[{"text":"The line.","type":"text"}]}]},{"name":"column","content":[{"type":"paragraph","inlineContent":[{"text":"The column.","type":"text"}]}]}]},{"content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"A ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask"},{"type":"text","text":" that represents the lifecycle of the effect executed when"},{"type":"text","text":" "},{"type":"text","text":"sending the action."}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"To assert on how state changes you can provide a trailing closure, and that closure is handed","type":"text"},{"text":" ","type":"text"},{"text":"a mutable variable that represents the feature’s state ","type":"text"},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"type":"text","text":" the action was sent. You need"},{"type":"text","text":" "},{"text":"to mutate that variable so that it is equal to the feature’s state ","type":"text"},{"inlineContent":[{"text":"after","type":"text"}],"type":"emphasis"},{"text":" the action is sent:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count = 1","}","await store.send(.decrementButtonTapped) {","  $0.count = 0","}"]},{"inlineContent":[{"text":"This method suspends in order to allow any effects to start. For example, if you track an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"analytics event in an effect when an action is sent, you can assert on that behavior"},{"text":" ","type":"text"},{"text":"immediately after awaiting ","type":"text"},{"code":"store.send","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["@Test","func analytics() async {","  let events = LockIsolated<[String]>([])","  let analytics = AnalyticsClient(","    track: { event in","      events.withValue { $0.append(event) }","    }","  )","","  let store = TestStore(initialState: Feature.State()) {","    Feature()","  } withDependencies {","    $0.analytics = analytics","  }","","  await store.send(.buttonTapped)","","  events.withValue { XCTAssertEqual($0, [\"Button Tapped\"]) }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This method suspends only for the duration until the effect "},{"type":"emphasis","inlineContent":[{"text":"starts","type":"text"}]},{"text":" from sending the action.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It does "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" suspend for the duration of the effect.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In order to suspend for the duration of the effect you can use its return value, a","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","isActive":true},{"type":"text","text":", which represents the lifecycle of the effect started from sending an"},{"type":"text","text":" "},{"text":"action. You can use this value to suspend until the effect finishes, or to force the","type":"text"},{"text":" ","type":"text"},{"text":"cancellation of the effect, which is helpful for effects that are tied to a view’s lifecycle","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and not torn down when an action is sent, such as actions sent in SwiftUI’s "},{"type":"codeVoice","code":"task"},{"type":"text","text":" view"},{"text":" ","type":"text"},{"type":"text","text":"modifier."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature kicks off a long-living effect when the view appears by using"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s "},{"code":"task","type":"codeVoice"},{"type":"text","text":" view modifier, then you can write a test for such a feature by explicitly"},{"type":"text","text":" "},{"type":"text","text":"canceling the effect’s task after you make all assertions:"}]},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(\/* ... *\/)","","\/\/ Emulate the view appearing","let task = await store.send(.task)","","\/\/ Assertions","","\/\/ Emulate the view disappearing","await task.cancel()"]}],"kind":"content"}],"sections":[],"metadata":{"symbolKind":"method","externalID":"s:22ComposableArchitecture9TestStoreC4send_6assert6fileID0G04line6columnAA0cD4TaskVq__yxzKcSgs12StaticStringVANS2utYaF","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier"}],"title":"send(_:assert:fileID:file:line:column:)","modules":[{"name":"ComposableArchitecture"}],"role":"symbol","extendedModule":"ComposableArchitecture"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-2wguq","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-2wguq":{"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-2wguq","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier","text":"TestStoreTask"}],"role":"symbol","title":"send(_:assert:fileID:file:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-2wguq","abstract":[{"text":"Sends an action to the store and asserts when state changes.","type":"text"}],"type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","type":"topic","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"abstract":[{"text":"The type returned from ","type":"text"},{"code":"TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","type":"codeVoice"},{"type":"text","text":" that represents the"},{"type":"text","text":" "},{"text":"lifecycle of the effect started from sending an action.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","title":"TestStoreTask","url":"\/documentation\/composablearchitecture\/teststoretask","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStoreTask","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStoreTask"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","url":"\/documentation\/composablearchitecture\/teststore"}}}