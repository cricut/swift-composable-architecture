{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseEphemeral()","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"text":"Marks the case of an enum reducer as holding onto “ephemeral” state.","type":"text"}],"seeAlsoSections":[{"title":"Enum reducers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer(state:action:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseIgnored()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducerState"],"generated":true,"anchor":"Enum-reducers"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@attached"},{"text":"(peer, names: named(`_`)) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ReducerCaseEphemeral","kind":"identifier"},{"kind":"text","text":"()"}],"platforms":["macOS"]}]},{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"inlineContent":[{"type":"text","text":"Apply this reducer to any cases of an enum reducer that holds onto state conforming to the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_EphemeralState","isActive":true,"type":"reference"},{"text":" protocol, such as ","type":"text"},{"type":"codeVoice","code":"AlertState"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ConfirmationDialogState"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","enum Destination {","  @ReducerCaseEphemeral","  case alert(AlertState<Alert>)","  \/\/ ...","","  enum Alert {","    case saveButtonTapped","    case discardButtonTapped","  }","}"]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/reducercaseephemeral()"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"metadata":{"role":"symbol","title":"ReducerCaseEphemeral()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReducerCaseEphemeral","kind":"identifier"},{"text":"()","kind":"text"}],"symbolKind":"macro","modules":[{"name":"ComposableArchitecture"}],"externalID":"s:22ComposableArchitecture20ReducerCaseEphemeralyycfm","roleHeading":"Macro"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/effect","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_EphemeralState":{"abstract":[{"type":"text","text":"Loosely represents features that are only briefly shown and the first time they are interacted"},{"type":"text","text":" "},{"type":"text","text":"with they are dismissed. Such features do not manage any behavior on the inside."}],"navigatorTitle":[{"text":"_EphemeralState","kind":"identifier"}],"kind":"symbol","title":"_EphemeralState","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"_EphemeralState","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_ephemeralstate","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_EphemeralState"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerCaseIgnored()":{"kind":"symbol","abstract":[{"type":"text","text":"Marks the case of an enum reducer as “ignored”, and as such will not compose the case’s domain"},{"text":" ","type":"text"},{"text":"into the rest of the reducer besides state.","type":"text"}],"title":"ReducerCaseIgnored()","type":"topic","url":"\/documentation\/composablearchitecture\/reducercaseignored()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ReducerCaseIgnored"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseIgnored()","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer(state:action:)":{"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer(state:action:)","title":"Reducer(state:action:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"("},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV","text":"_SynthesizedConformance","kind":"typeIdentifier"},{"text":"..., ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"_SynthesizedConformance","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV","kind":"typeIdentifier"},{"kind":"text","text":"...)"}],"type":"topic","abstract":[{"type":"text","text":"An overload of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"text":" that takes a description of protocol conformances to synthesize on","type":"text"},{"text":" ","type":"text"},{"text":"the State and Action types","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer(state:action:)","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseReducerState":{"role":"symbol","navigatorTitle":[{"text":"CaseReducerState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducerState","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CaseReducerState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/casereducerstate","abstract":[{"text":"A state type that is associated with a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducer","type":"reference","isActive":true},{"type":"text","text":"."}],"title":"CaseReducerState","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseReducer":{"type":"topic","title":"CaseReducer","abstract":[{"text":"A reducer represented by multiple enum cases.","type":"text"}],"url":"\/documentation\/composablearchitecture\/casereducer","role":"symbol","navigatorTitle":[{"text":"CaseReducer","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CaseReducer"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"kind":"symbol","title":"Reducer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"url":"\/documentation\/composablearchitecture\/reducer()","type":"topic","kind":"symbol","title":"Reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for a type.","type":"text"}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerCaseEphemeral()":{"type":"topic","title":"ReducerCaseEphemeral()","abstract":[{"type":"text","text":"Marks the case of an enum reducer as holding onto “ephemeral” state."}],"url":"\/documentation\/composablearchitecture\/reducercaseephemeral()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"ReducerCaseEphemeral","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseEphemeral()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","type":"topic","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]}}}