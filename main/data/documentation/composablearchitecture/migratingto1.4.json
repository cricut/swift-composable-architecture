{"abstract":[{"text":"Update your code to make use of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro, and learn how to better leverage case key","type":"text"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","interfaceLanguage":"swift"},"metadata":{"role":"article","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Article","title":"Migrating to 1.4"},"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"text":" ","type":"text"},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"type":"text","text":" "},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"text":" ","type":"text"},{"type":"text","text":"APIs, and this article contains some tips for doing so."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Using-the-Reducer-macro","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Using-case-key-paths","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#Receiving-test-store-actions","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#Moving-off-of-TaskResult","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Identified-actions","isActive":true}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Using-the-Reducer-macro","text":"Using the @Reducer macro","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":". It is called ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":", and to migrate existing code one only needs to annotate"},{"type":"text","text":" "},{"type":"text","text":"their type with "},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"],"type":"codeListing","syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of"},{"type":"text","text":" "},{"text":"reducer composition, such as case key paths (see guides below). See the documentation of","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" to see everything that macro adds to your feature’s reducer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also technically drop the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" conformance:"}]},{"syntax":"diff","type":"codeListing","code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"See the documentation of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","isActive":true},{"type":"text","text":" for more gotchas on using the "},{"type":"codeVoice","code":"@Reducer"},{"text":" macro.","type":"text"}]},{"level":3,"anchor":"Using-case-key-paths","type":"heading","text":"Using case key paths"},{"inlineContent":[{"text":"In version 1.4 we soft-deprecated many APIs that take the ","type":"text"},{"type":"codeVoice","code":"CasePath"},{"text":" type in favor of APIs that take","type":"text"},{"type":"text","text":" "},{"type":"text","text":"what is known as a "},{"code":"CaseKeyPath","type":"codeVoice"},{"text":". Both of these types come from our ","type":"text"},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true},{"type":"text","text":" "},{"type":"text","text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do"},{"type":"text","text":" "},{"type":"text","text":"so with structs."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths"},{"type":"text","text":" "},{"type":"text","text":"that massively improved the ergonomics of using case paths. We introduced the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro"},{"text":" ","type":"text"},{"text":"for automatically deriving case paths so that we could stop using runtime reflection, and we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"introduced a way of using key paths to describe case paths. And so the old "},{"type":"codeVoice","code":"CasePath"},{"text":" type has been","type":"text"},{"text":" ","type":"text"},{"text":"deprecated, and the new ","type":"text"},{"type":"codeVoice","code":"CaseKeyPath"},{"type":"text","text":" type has taken its place."}]},{"inlineContent":[{"text":"This means that previously when you would use APIs involving case paths you would have to use the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":" prefix operator to derive the case path. For example:","type":"text"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You now get to shorten that into a far simpler, more familiar key path syntax:","type":"text"}]},{"code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" conformances with the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro:"}]},{"code":["@Reducer","struct Feature {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Which automatically applies the "},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro to the feature’s ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum among other","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"things:"}],"type":"paragraph"},{"code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"],"syntax":"diff","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the feature’s "},{"code":"State","type":"codeVoice"},{"type":"text","text":" is an enum, "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" will also be applied, along with"},{"type":"text","text":" "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dynamic member lookups allows a state’s associated value to be accessed via dot-syntax, which can be"},{"type":"text","text":" "},{"type":"text","text":"useful when scoping a store’s state to a specific case:"}]},{"syntax":"diff","type":"codeListing","code":[" IfLetStore(","   store.scope(","-    state: \/Feature.State.tray, action: Feature.Action.tray","+    state: \\.tray, action: { .tray($0) }","   )",") { store in","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To form a case key path for any other enum, you must apply the "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro explicitly:"}]},{"type":"codeListing","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"],"syntax":"swift"},{"inlineContent":[{"text":"And to access its associated values, you must also apply the ","type":"text"},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"text":" attributes:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@CasePathable","@dynamicMemberLookup","enum DestinationState {","  case tray(Tray.State)","}"]},{"inlineContent":[{"type":"text","text":"Anywhere you previously used the "},{"type":"codeVoice","code":"\/"},{"text":" prefix operator for case paths you should now be able to use","type":"text"},{"type":"text","text":" "},{"text":"key path syntax, so long as all of the enums involved are ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you encounter any problems, create a "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","isActive":true,"type":"reference"},{"text":" on the Composable Architecture","type":"text"},{"type":"text","text":" "},{"text":"repo.","type":"text"}],"type":"paragraph"},{"anchor":"Receiving-test-store-actions","level":3,"type":"heading","text":"Receiving test store actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The power of case key paths and the "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro has made it possible to massively simplify"},{"text":" ","type":"text"},{"text":"how one asserts on actions received in a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":". Instead of constructing the concrete action","type":"text"},{"type":"text","text":" "},{"text":"received from an effect like this:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…you can use key path syntax to describe the nesting of action cases that is received:"}]},{"code":["store.receive(\\.child.presented.response.success)"],"syntax":"swift","type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Case key path syntax requires that every nested action is ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":". Reducer actions","type":"text"},{"text":" ","type":"text"},{"text":"are typically ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" automatically via the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" macro, but other enums must be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"explicitly annotated:"}]},{"code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"],"syntax":"swift","type":"codeListing"}],"type":"aside","name":"Note"},{"inlineContent":[{"type":"text","text":"And in the case of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"text":" you can even omit the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"path component:"}],"type":"paragraph"},{"code":["store.receive(\\.child.response.success)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This does not assert on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"data"}]},{"type":"text","text":" received in the action, but typically that is already covered"},{"type":"text","text":" "},{"type":"text","text":"by the state assertion made inside the trailing closure of "},{"type":"codeVoice","code":"receive"},{"type":"text","text":". And if you use this style of"},{"type":"text","text":" "},{"text":"action receiving exclusively, you can even stop conforming your action types to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"There are a few advanced situations to be aware of. When receiving an action that involves an","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true,"type":"reference"},{"type":"text","text":" (more information below in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","isActive":true},{"type":"text","text":"), then"},{"type":"text","text":" "},{"type":"text","text":"you can use the subscript "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)"},{"text":" to","type":"text"},{"type":"text","text":" "},{"text":"receive a particular action for an element:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.rows[id: 0].response.success)"]},{"type":"paragraph","inlineContent":[{"text":"And the same goes for ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"type":"text","text":" too:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.path[id: 0].response.success)"]},{"level":3,"type":"heading","anchor":"Moving-off-of-TaskResult","text":"Moving off of TaskResult"},{"type":"paragraph","inlineContent":[{"text":"In version 1.4 of the library, the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"text":" was soft-deprecated and eventually will be fully","type":"text"},{"type":"text","text":" "},{"text":"deprecated and then removed. The original rationale for the introduction of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"text":" was to","type":"text"},{"type":"text","text":" "},{"text":"make an equatable-friendly version of ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" for when the error produced was ","type":"text"},{"code":"any Error","type":"codeVoice"},{"type":"text","text":", which is"},{"type":"text","text":" "},{"type":"text","text":"not equatable. And the reason to want an equatable-friendly result is so that the "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" type in"},{"type":"text","text":" "},{"type":"text","text":"reducers can be equatable, and the reason for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"text":" is to make it possible to test actions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"emitted by effects."}]},{"inlineContent":[{"type":"text","text":"Typically in tests, when one wants to assert that the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":" received an action you must","type":"text"},{"type":"text","text":" "},{"text":"specify a concrete action:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" uses the equatable conformance of "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" to confirm that you are asserting that"},{"type":"text","text":" "},{"text":"the store received the correct action.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this becomes verbose when testing deeply nested features, which is common in integration"},{"text":" ","type":"text"},{"text":"tests:","type":"text"}]},{"syntax":"swift","code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"However, with the introduction of ","type":"text"},{"overridingTitleInlineContent":[{"text":"case key paths","type":"text"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true,"overridingTitle":"case key paths","type":"reference"},{"text":" we greatly improved the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the"},{"text":" ","type":"text"},{"text":"case of the enum you expect to receive, and you can even omit the associated data from the action","type":"text"},{"type":"text","text":" "},{"text":"since typically that is covered in the state assertion:","type":"text"}]},{"syntax":"swift","code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"And this syntax does not require the ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum to be equatable since we are only asserting that"},{"type":"text","text":" "},{"type":"text","text":"the case of the action was received. We are not testing the data in the action."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We feel that with this better syntax there is less of a reason to have "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"type":"text","text":" and so we"},{"text":" ","type":"text"},{"type":"text","text":"do plan on removing it eventually. If you have an important use case for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" that you"},{"type":"text","text":" "},{"type":"text","text":"think merits it being in the library, please "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","isActive":true,"overridingTitle":"open a discussion","overridingTitleInlineContent":[{"type":"text","text":"open a discussion"}],"type":"reference"},{"type":"text","text":"."}]},{"type":"heading","text":"Identified actions","anchor":"Identified-actions","level":3},{"type":"paragraph","inlineContent":[{"text":"In version 1.4 of the library we introduced the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"reference","isActive":true},{"type":"text","text":" type which makes it more"},{"type":"text","text":" "},{"text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would","type":"text"},{"type":"text","text":" "},{"type":"text","text":"have a case in your "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum for a particular row that holds the ID of the state being acted"},{"type":"text","text":" "},{"text":"upon as well as the action:","type":"text"}]},{"code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This can be updated to hold onto ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"type":"text","text":" instead of those piece of data directly in the"},{"type":"text","text":" "},{"text":"case:","type":"text"}]},{"syntax":"swift","code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And in the reducer, instead of invoking"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8"},{"type":"text","text":" with a case path using the"},{"text":" ","type":"text"},{"code":"\/","type":"codeVoice"},{"text":" prefix operator:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"]},{"type":"paragraph","inlineContent":[{"text":"…you will instead use key path syntax to determine which case of the ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum holds the"},{"text":" ","type":"text"},{"text":"identified action:","type":"text"}]},{"type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and"},{"type":"text","text":" "},{"type":"text","text":"type-inference."}]},{"type":"paragraph","inlineContent":[{"text":"One last change you will need to make is anywhere you are destructuring the old-style action you","type":"text"},{"text":" ","type":"text"},{"text":"will need to insert a ","type":"text"},{"type":"codeVoice","code":".element"},{"type":"text","text":" layer:"}]},{"syntax":"diff","code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"],"type":"codeListing"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.4"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"],"generated":true}],"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"url":"\/documentation\/composablearchitecture\/stackaction","navigatorTitle":[{"text":"StackAction","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"StackAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","role":"symbol","kind":"symbol","title":"StackAction","type":"topic","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","url":"\/documentation\/composablearchitecture\/taskresult","kind":"symbol","abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"role":"symbol","deprecated":true,"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskResult","kind":"identifier"}],"title":"TaskResult","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"kind":"symbol","title":"Reducer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","type":"topic","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Gotchas":{"kind":"section","type":"topic","title":"Gotchas","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","url":"\/documentation\/composablearchitecture\/reducer#Gotchas","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" "},{"type":"text","text":"property wrapper, and the "},{"type":"codeVoice","code":"appStorage"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"text":" persistence strategies.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.10","kind":"article","type":"topic","role":"article","title":"Migrating to 1.10","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"title":"ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","url":"\/documentation\/composablearchitecture\/foreachstore","kind":"symbol","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"text":" that simplifies working with","type":"text"},{"type":"text","text":" "},{"text":"collections of state.","type":"text"}],"navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"role":"symbol","deprecated":true},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"type":"link","title":"discussion","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","titleInlineContent":[{"type":"text","text":"discussion"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PresentationAction","kind":"identifier"}],"abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction","type":"topic","title":"PresentationAction","role":"symbol","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"type":"topic","title":"Migrating to 1.17.1","role":"article","abstract":[{"text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable","type":"text"},{"text":" ","type":"text"},{"text":"Architecture has been updated to extend support to this new version.","type":"text"}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","url":"\/documentation\/composablearchitecture\/migratingto1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"type":"topic","title":"scope(state:action:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scope"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"text":": ","kind":"text"},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"IdentifiedAction"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IdentifiedAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","url":"\/documentation\/composablearchitecture\/identifiedaction","type":"topic","title":"IdentifiedAction","role":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"type":"codeVoice","code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"type":"text","text":"assert on the payload inside an action received."}],"url":"\/documentation\/composablearchitecture\/migratingto1.6","kind":"article","type":"topic","role":"article","title":"Migrating to 1.6","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"url":"\/documentation\/composablearchitecture\/migratingto1.17","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","role":"article","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"type":"text","text":" "},{"text":"library so that they can be used in non-Composable Architecture applications. This a","type":"text"},{"type":"text","text":" "},{"text":"backwards compatible change, but some new deprecations have been introduced.","type":"text"}],"title":"Migrating to 1.17","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"url":"\/documentation\/composablearchitecture\/reducer()","type":"topic","kind":"symbol","title":"Reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for a type.","type":"text"}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},"http://github.com/pointfreeco/swift-case-paths":{"type":"link","title":"CasePaths","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","titleInlineContent":[{"text":"CasePaths","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","url":"\/documentation\/composablearchitecture\/store","title":"Store","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","role":"symbol","abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"title":"dependency(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dependency"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","title":"Migrating to 1.15","role":"article","kind":"article","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"text":" ","type":"text"},{"text":"concurrency with no warnings or errors.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.15","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:filePath:line:column:)-6zye8":{"kind":"symbol","title":"forEach(_:action:element:fileID:filePath:line:column:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ElementState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ElementAction"},{"kind":"text","text":", "},{"text":"ID","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Element","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"text":"IdentifiedArray","kind":"typeIdentifier","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"kind":"text","text":"<"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ElementState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"text":"IdentifiedAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"text":"ElementAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"element","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":">\n"}],"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:filepath:line:column:)-6zye8","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/effect","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"abstract":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" type is now officially ","type":"text"},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" isolated."}],"url":"\/documentation\/composablearchitecture\/migratingto1.14","kind":"article","type":"topic","role":"article","title":"Migrating to 1.14","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"url":"\/documentation\/composablearchitecture\/migratingto1.5","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","role":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true,"type":"reference"},{"text":" operation on ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"title":"Migrating to 1.5","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"type":"topic","title":"Migrating to 1.7","role":"article","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"text":"APIs such as ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true,"type":"reference"},{"type":"text","text":", and more."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","url":"\/documentation\/composablearchitecture\/migratingto1.7"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"type":"topic","title":"Migrating to 1.11","role":"article","abstract":[{"text":"Update your code to use the new ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"contexts, rather than mutating the underlying wrapped value directly."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.13","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}],"role":"article","title":"Migrating to 1.13"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"title":"IfLetStore","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","url":"\/documentation\/composablearchitecture\/ifletstore","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"kind":"section","type":"topic","title":"Identified actions","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"("},{"text":"id","kind":"externalParam"},{"text":" _: ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AnyCasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths03AnyA4PathV"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","text":"IdentifiedAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","title":"subscript(id:)","url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)","abstract":[]},"#Using-the-Reducer-macro":{"type":"link","title":"Using the @Reducer macro","identifier":"#Using-the-Reducer-macro","url":"#Using-the-Reducer-macro","titleInlineContent":[{"type":"text","text":"Using the @Reducer macro"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","kind":"symbol","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presentation state."}],"role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"presented","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}],"title":"PresentationAction.presented(_:)","type":"topic"},"#Identified-actions":{"type":"link","title":"Identified actions","identifier":"#Identified-actions","url":"#Identified-actions","titleInlineContent":[{"text":"Identified actions","type":"text"}]},"#Using-case-key-paths":{"type":"link","title":"Using case key paths","identifier":"#Using-case-key-paths","url":"#Using-case-key-paths","titleInlineContent":[{"type":"text","text":"Using case key paths"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.8","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro, including automatic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"role":"article","title":"Migrating to 1.8"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.9","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"codeVoice","code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"method on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},{"type":"text","text":" method for overriding dependencies."}],"role":"article","title":"Migrating to 1.9"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"deprecated":true,"url":"\/documentation\/composablearchitecture\/withviewstore","title":"WithViewStore","kind":"symbol","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"text":"A view helper that transforms a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" into a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"type":"topic","url":"\/documentation\/composablearchitecture\/migrationguides","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"role":"collectionGroup","title":"Migration guides"},"#Receiving-test-store-actions":{"type":"link","title":"Receiving test store actions","identifier":"#Receiving-test-store-actions","url":"#Receiving-test-store-actions","titleInlineContent":[{"text":"Receiving test store actions","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"url":"\/documentation\/composablearchitecture\/migratingto1.12","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","role":"article","abstract":[{"text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence","type":"text"},{"type":"text","text":" "},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"title":"Migrating to 1.12","kind":"article"},"#Moving-off-of-TaskResult":{"type":"link","title":"Moving off of TaskResult","identifier":"#Moving-off-of-TaskResult","url":"#Moving-off-of-TaskResult","titleInlineContent":[{"type":"text","text":"Moving off of "},{"code":"TaskResult","type":"codeVoice"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":".appStorage"},{"text":" strategy used with ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" now uses key-value observing instead of"},{"type":"text","text":" "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"url":"\/documentation\/composablearchitecture\/migratingto1.16","kind":"article","type":"topic","role":"article","title":"Migrating to 1.16","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16"}}}