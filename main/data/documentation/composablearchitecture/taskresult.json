{"metadata":{"roleHeading":"Enumeration","title":"TaskResult","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"platforms":[],"navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"modules":[{"name":"ComposableArchitecture"}],"symbolKind":"enum","externalID":"s:22ComposableArchitecture10TaskResultO","role":"symbol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/taskresult"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","interfaceLanguage":"swift"},"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"]}],"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"topicSections":[{"anchor":"Representing-a-task-result","title":"Representing a task result","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"]},{"title":"Converting a throwing expression","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"],"anchor":"Converting-a-throwing-expression"},{"title":"Accessing a resultâ€™s value","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"],"anchor":"Accessing-a-results-value"},{"anchor":"Transforming-results","title":"Transforming results","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations"],"generated":true,"title":"Default Implementations","anchor":"Default-Implementations"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskResult"},{"text":"<","kind":"text"},{"text":"Success","kind":"genericParameter"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Success","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"This type is needed because Swiftâ€™s concurrency tools can only express untyped errors, such as","type":"text"},{"type":"text","text":" "},{"code":"async","type":"codeVoice"},{"type":"text","text":" functions and "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":", and so their output can realistically only be bridged to"},{"type":"text","text":" "},{"code":"Result<_, any Error>","type":"codeVoice"},{"type":"text","text":". However, "},{"type":"codeVoice","code":"Result<_, any Error>"},{"text":" is never ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" since "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", and equatability is very important for testing in the Composable Architecture. By"},{"type":"text","text":" "},{"text":"defining our own type we get the ability to recover equatability in most situations.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If someday Swift gets typed ","type":"text"},{"type":"codeVoice","code":"throws"},{"text":", then we can eliminate this type and rely solely on","type":"text"},{"text":" ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You typically use this type as the payload of an action which receives a response from an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"effect:"}],"type":"paragraph"},{"syntax":"swift","code":["enum Action: Equatable {","  case factButtonTapped","  case factResponse(TaskResult<String>)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then you can model your dependency as using simple ","type":"text"},{"code":"async","type":"codeVoice"},{"type":"text","text":" and "},{"code":"throws","type":"codeVoice"},{"type":"text","text":" functionality:"}]},{"type":"codeListing","code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally you can use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":" to construct an"},{"type":"text","text":" "},{"text":"effect in the reducer that invokes the ","type":"text"},{"code":"numberFact","type":"codeVoice"},{"text":" endpoint and wraps its response in a","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" by using its catching initializer, "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","isActive":true},{"text":":","type":"text"}]},{"code":["case .factButtonTapped:","  return .run { send in","    await send(","      .factResponse(","        TaskResult { try await self.numberFact.fetch(state.number) }","      )","    )","  }","","case let .factResponse(.success(fact)):","  \/\/ do something with fact","","case .factResponse(.failure):","  \/\/ handle error","","\/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"text":"Equality","level":2,"anchor":"Equality","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The biggest downside to using an untyped ","type":"text"},{"code":"Error","type":"codeVoice"},{"type":"text","text":" in a result type is that the result will not"},{"type":"text","text":" "},{"type":"text","text":"be equatable even if the success type is. This negatively affects your ability to test features"},{"text":" ","type":"text"},{"type":"text","text":"that use "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"type":"text","text":" in their actions with the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":"."}]},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" does extra work to try to maintain equatability when possible. If the underlying"},{"type":"text","text":" "},{"type":"text","text":"type masked by the "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Equatable"},{"text":", then it will use that ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" conformance"},{"type":"text","text":" "},{"type":"text","text":"on two failures. Luckily, most errors thrown by Appleâ€™s frameworks are already equatable, and"},{"type":"text","text":" "},{"text":"because errors are typically simple value types, it is usually possible to have the compiler","type":"text"},{"type":"text","text":" "},{"text":"synthesize a conformance for you.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are testing the unhappy path of a feature that feeds a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" back into the"},{"type":"text","text":" "},{"text":"system, be sure to conform the error to equatable, or the test will fail:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error {}","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ ðŸ›‘","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}","\/\/ ðŸ›‘ 'RefreshFailure' is not equatable"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"To get a passing test, explicitly conform your custom error to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error, Equatable {} \/\/ ðŸ‘ˆ","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ âœ…","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}"],"type":"codeListing"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf"],"title":"Creating an effect","generated":true,"anchor":"Creating-an-effect"}],"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swiftâ€™s "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'Result', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.4#Moving-off-of-TaskResult"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"kind":"symbol","title":"Reducer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","url":"\/documentation\/composablearchitecture\/taskresult","kind":"symbol","abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swiftâ€™s "},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"role":"symbol","deprecated":true,"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskResult","kind":"identifier"}],"title":"TaskResult","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/effect","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Equatable-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","title":"Equatable Implementations","url":"\/documentation\/composablearchitecture\/taskresult\/equatable-implementations","role":"collectionGroup","type":"topic"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"url":"\/documentation\/composablearchitecture\/effect\/none","type":"topic","kind":"symbol","title":"none","abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"text":" ","type":"text"},{"type":"text","text":"return an effect, but you donâ€™t need to do anything."}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"none"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/CasePathable-Implementations":{"kind":"article","abstract":[],"title":"CasePathable Implementations","type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/casepathable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/init(_:)","abstract":[{"type":"text","text":"Transforms a "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"TaskResult"},{"text":", erasing its ","type":"text"},{"code":"Failure","type":"codeVoice"},{"type":"text","text":" to "},{"code":"Error","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"text":"Failure","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"Result","preciseIdentifier":"s:s6ResultO","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Failure"},{"text":">)","kind":"text"}],"deprecated":true,"title":"init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(catching:)":{"role":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/init(catching:)","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","kind":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"catching","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"title":"init(catching:)","abstract":[{"type":"text","text":"Creates a new task result by evaluating an async throwing closure, capturing the returned"},{"text":" ","type":"text"},{"type":"text","text":"value as a success, or any thrown error as a failure."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","type":"topic","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/send(_:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/effect\/send(_:)","role":"symbol","title":"send(_:)","abstract":[{"type":"text","text":"Initializes an effect that immediately emits the action passed in."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/failure(_:)":{"kind":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult\/failure(_:)","title":"TaskResult.failure(_:)","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"failure","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"A failure, storing an error."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"},"doc://ComposableArchitecture/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable"},"doc://ComposableArchitecture/SH":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SH","title":"Swift.Hashable"},"doc://ComposableArchitecture/9CasePaths0A8PathableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","title":"CasePaths.CasePathable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/map(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/map(_:)","abstract":[{"type":"text","text":"Returns a new task result, mapping any success value using the given transformation."}],"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"map"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"Success","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewSuccess"},{"kind":"text","text":") -> "},{"text":"TaskResult","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"kind":"text","text":"<"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":">","kind":"text"}],"deprecated":true,"title":"map(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Hashable-Implementations":{"url":"\/documentation\/composablearchitecture\/taskresult\/hashable-implementations","title":"Hashable Implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations","role":"collectionGroup","kind":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"catch","kind":"externalParam"},{"kind":"text","text":": ((any "},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","role":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Result/init(_:)":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)","kind":"symbol","title":"init(_:)","abstract":[{"type":"text","text":"Transforms a "},{"code":"TaskResult","type":"codeVoice"},{"type":"text","text":" into a "},{"code":"Result","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"TaskResult","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"kind":"text","text":"<"},{"text":"Success","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"url":"\/documentation\/composablearchitecture\/swift\/result\/init(_:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Success"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Failure","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"any Error"},{"type":"text","text":"."}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/flatMap(_:)":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","kind":"symbol","title":"flatMap(_:)","abstract":[{"text":"Returns a new task result, mapping any success value using the given transformation and","type":"text"},{"text":" ","type":"text"},{"text":"unwrapping the produced result.","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"flatMap","kind":"identifier"},{"kind":"text","text":"<"},{"text":"NewSuccess","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") -> "},{"text":"TaskResult","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"kind":"text","text":"<"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/taskresult\/flatmap(_:)","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/value":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Success","kind":"typeIdentifier"}],"role":"symbol","abstract":[{"text":"Returns the success value as a throwing property.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value","type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/value","deprecated":true,"title":"value"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/success(_:)":{"type":"topic","kind":"symbol","abstract":[{"text":"A success, storing a ","type":"text"},{"code":"Success","type":"codeVoice"},{"text":" value.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/success(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","title":"TaskResult.success(_:)","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"success","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":")","kind":"text"}],"deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectOf":{"navigatorTitle":[{"text":"EffectOf","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf","url":"\/documentation\/composablearchitecture\/effectof","kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect of a given reducerâ€™s domain."}],"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"EffectOf","kind":"identifier"}],"title":"EffectOf","type":"topic"},"doc://ComposableArchitecture/SQ":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ","title":"Swift.Equatable"}}}