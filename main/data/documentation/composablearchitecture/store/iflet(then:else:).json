{"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use 'observe' and 'if let store.scope', instead.","type":"text"}]}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"then","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"text":"else","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> any ","kind":"text"},{"preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier","text":"Cancellable"}],"extendedModule":"ComposableArchitecture","role":"symbol","title":"ifLet(then:else:)","roleHeading":"Instance Method","externalID":"s:22ComposableArchitecture5StoreC5ifLet4then4else7Combine11Cancellable_pyACyqd__q_Gc_yyctqd__SgRszlF","symbolKind":"method","platforms":[],"modules":[{"name":"ComposableArchitecture"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/store\/iflet(then:else:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations"]]},"abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"text":"whenever this condition changes for as long as the cancellable lives.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@"},{"text":"MainActor","kind":"attribute","preciseIdentifier":"s:ScM"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"then","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"unwrap"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":", ","kind":"text"},{"text":"else","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" () -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":" = {}) -> any "},{"preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier","text":"Cancellable"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":" == "},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":"?"}]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that is called with a store of non-optional state when the store’s"},{"text":" ","type":"text"},{"type":"text","text":"state is non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", or whenever it goes from "},{"type":"codeVoice","code":"nil"},{"text":" to non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"name":"unwrap"},{"content":[{"inlineContent":[{"text":"A function that is called when the store’s optional state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", or whenever it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"goes from non-"},{"type":"codeVoice","code":"nil"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"else"}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A cancellable that maintains a subscription to updates whenever the store’s state"},{"text":" ","type":"text"},{"text":"goes from ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" to non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" and vice versa, so that the caller can react to these changes."}]}],"kind":"content"},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"If the store’s state is non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", it will safely unwrap the value and bundle it into a new"},{"text":" ","type":"text"},{"text":"store of non-optional state that is passed to the first closure. If the store’s state is","type":"text"},{"type":"text","text":" "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", the second closure is called instead."}]},{"inlineContent":[{"text":"This method is useful for handling navigation in UIKit. The state for a screen the user wants","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to navigate to can be held as an optional value in the parent, and when that value goes from"},{"text":" ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to non-"},{"type":"codeVoice","code":"nil"},{"text":", or non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", you can update the navigation stack accordingly:","type":"text"}],"type":"paragraph"},{"code":["class ParentViewController: UIViewController {","  let store: Store<ParentState, ParentAction>","  var cancellables: Set<AnyCancellable> = []","  \/\/ ...","  func viewDidLoad() {","    \/\/ ...","    store","      .scope(state: \\.optionalChild, action: \\.child)","      .ifLet(","        then: { [weak self] childStore in","          self?.navigationController?.pushViewController(","            ChildViewController(store: childStore),","            animated: true","          )","        },","        else: { [weak self] in","          guard let self else { return }","          navigationController?.popToViewController(self, animated: true)","        }","      )","      .store(in: &cancellables)","  }","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"],"title":"Combine integration","anchor":"Combine-integration","generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreDeprecations":{"kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Review unsupported store APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations","type":"topic","url":"\/documentation\/composablearchitecture\/storedeprecations","title":"Deprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","type":"topic","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"deprecated":true,"title":"publisher","kind":"symbol","abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","url":"\/documentation\/composablearchitecture\/viewstore\/publisher","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"text":">","kind":"text"}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"type":"topic","title":"UIKit Integration","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"kind":"article","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","title":"ifLet(then:else:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"then","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":", ","kind":"text"},{"text":"else","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> any "},{"preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable","kind":"typeIdentifier"}],"type":"topic","deprecated":true,"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","url":"\/documentation\/composablearchitecture\/store","title":"Store","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/publisher","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StorePublisher","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"publisher"}}}