{"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"metadata":{"role":"article","title":"Adopting Swift concurrency","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}]},"seeAlsoSections":[{"generated":true,"anchor":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"title":"Integrations"}],"primaryContentSections":[{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types"},{"type":"text","text":" "},{"text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"type":"text","text":" "},{"text":"you will need to know how to prove to the compiler that your types are safe to use concurrently.","type":"text"}]},{"inlineContent":[{"type":"text","text":"There primary way to create an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" in the library is via"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","type":"reference"},{"text":". It takes a ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"type":"text","text":", asynchronous closure,"},{"type":"text","text":" "},{"type":"text","text":"which restricts the types of closures you can use for your effects. In particular, the closure can"},{"text":" ","type":"text"},{"text":"only capture ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" variables that are bound with "},{"type":"codeVoice","code":"let"},{"type":"text","text":". Mutable variables and non-"},{"type":"codeVoice","code":"Sendable"},{"text":" ","type":"text"},{"type":"text","text":"types are simply not allowed to be passed to "},{"code":"@Sendable","type":"codeVoice"},{"type":"text","text":" closures."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are two primary ways you will run into this restriction when building a feature in the"},{"text":" ","type":"text"},{"type":"text","text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from"},{"text":" ","type":"text"},{"type":"text","text":"within an effect."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Accessing state in an effect","anchor":"Accessing-state-in-an-effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reducers are executed with a mutable, "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" state variable, and such variables cannot be accessed"},{"text":" ","type":"text"},{"type":"text","text":"from within "},{"type":"codeVoice","code":"@Sendable"},{"text":" closures:","type":"text"}]},{"code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        return .run { send in","          try await Task.sleep(for: .seconds(1))","          await send(.delayed(state.count))","          \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","          \/\/    not allowed in concurrently-executing code","        }","","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"To work around this you must explicitly capture the state as an immutable value for the scope of the"},{"type":"text","text":" "},{"text":"closure:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can also capture just the minimal parts of the state you need for the effect by binding a new"},{"text":" ","type":"text"},{"type":"text","text":"variable name for the capture:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(count))  \/\/ ✅","}"]},{"anchor":"Accessing-dependencies-in-an-effect","text":"Accessing dependencies in an effect","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with"},{"type":"text","text":" "},{"text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"asynchronous and concurrent contexts, and so must be "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If your dependency is not sendable, you will be notified at the time of registering it with the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"library. In particular, when extending "},{"code":"DependencyValues","type":"codeVoice"},{"type":"text","text":" to provide the computed property:"}]},{"syntax":"swift","code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"FactClient","type":"codeVoice"},{"text":" is not ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", for whatever reason, you will get a warning in the "},{"code":"get","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"set","type":"codeVoice"},{"type":"text","text":" lines:"}]},{"syntax":null,"type":"codeListing","code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"]},{"inlineContent":[{"type":"text","text":"To fix this you need to make each dependency "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":". This usually just means making sure"},{"type":"text","text":" "},{"type":"text","text":"that the interface type only holds onto "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" data, and in particular, any closure-based"},{"text":" ","type":"text"},{"text":"endpoints should be annotated as ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will restrict the kinds of closures that can be used when constructing "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" values, thus"},{"type":"text","text":" "},{"text":"making the entire ","type":"text"},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" sendable itself."}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"]}],"kind":"article","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","type":"topic","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/effect","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"catch","kind":"externalParam"},{"kind":"text","text":": ((any "},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","role":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"url":"\/documentation\/composablearchitecture\/observationbackport","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","kind":"article","title":"Observation backport","role":"article","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as well as the caveats of using the backported tools."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"title":"SwiftUI Integration","type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"type":"topic","title":"UIKit Integration","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"kind":"article","role":"collectionGroup"}}}