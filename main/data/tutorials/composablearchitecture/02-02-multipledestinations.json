{"sections":[{"title":"Multiple presentation destinations","chapter":"Navigation","content":[{"inlineContent":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"type":"paragraph"}],"estimatedTimeInMinutes":30,"kind":"hero"},{"kind":"tasks","tasks":[{"title":"Delete contacts","stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift that we worked in from the last section. Add a new action"},{"type":"text","text":" "},{"text":"that will be sent when the delete button is tapped on a row in the contacts list.","type":"text"}],"type":"paragraph"}],"code":"02-02-01-code-0000.swift","caption":[],"type":"step","runtimePreview":null,"media":null},{"inlineContent":[{"type":"text","text":"When the delete button is tapped we want to show an alert asking the user to confirm deletion"},{"type":"text","text":" "},{"text":"of the contact.","type":"text"}],"type":"paragraph"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Add a piece of optional ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"type":"text","text":" state to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactsFeature"},{"text":" state. We will further use ","type":"text"},{"code":"AlertState","type":"codeVoice"},{"type":"text","text":" as it allows us to describe all"},{"text":" ","type":"text"},{"type":"text","text":"of the details of the alert in a manner that is test friendly since it is "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]}],"media":null,"type":"step","code":"02-02-01-code-0001.swift","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add a new case to the "},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":"’s action that represents the actions that can"},{"text":" ","type":"text"},{"type":"text","text":"happen in the alert. We will use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":" for this."}],"type":"paragraph"}],"code":"02-02-01-code-0002.swift","runtimePreview":null,"caption":[{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"text":"The only choices in the alert are to cancel or confirm deletion, but we do not need","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to model the cancel action. That will be handled automatically for us."}],"type":"paragraph"}]}],"media":null},{"inlineContent":[{"text":"Now that we have new state modeled in our domain for the presentation of the alert, we can","type":"text"},{"text":" ","type":"text"},{"text":"properly implement the ","type":"text"},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" action."}],"type":"paragraph"},{"media":null,"caption":[],"content":[{"inlineContent":[{"text":"When the delete button is tapped we can populate the ","type":"text"},{"code":"alert","type":"codeVoice"},{"type":"text","text":" state in order to ask the user"},{"type":"text","text":" "},{"type":"text","text":"to confirm deletion of the contact."}],"type":"paragraph"}],"type":"step","code":"02-02-01-code-0003.swift","runtimePreview":null},{"media":null,"runtimePreview":null,"caption":[],"code":"02-02-01-code-0004.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Integrate the alert’s logic into the ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" by making another use of the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","isActive":true},{"text":" operator.","type":"text"}]}]},{"caption":[],"code":"02-02-01-code-0005.swift","content":[{"inlineContent":[{"text":"Listen for when the confirmation action is sent in the alert, and at that time we can","type":"text"},{"type":"text","text":" "},{"text":"actually remove the element from the array.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to integrate the alert it the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" and implement all of its"},{"text":" ","type":"text"},{"text":"logic. Next we need to integrate the alert into the view. The library ships a special","type":"text"},{"text":" ","type":"text"},{"code":"SwiftUI\/View\/alert(store:)","type":"codeVoice"},{"type":"text","text":" view modifier that is tuned specifically for"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":"s.","type":"text"}]},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the "},{"type":"codeVoice","code":"SwiftUI\/View\/alert(_:)"},{"type":"text","text":" view modifier to the "},{"type":"codeVoice","code":"ContactsView"},{"type":"text","text":", and hand it a"},{"type":"text","text":" "},{"type":"text","text":"store that is scoped to the alert domain."}]}],"caption":[{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In order for the "},{"type":"codeVoice","code":"$store.scope"},{"type":"text","text":" syntax to work you must hold onto the store in the"},{"type":"text","text":" "},{"type":"text","text":"view using the "},{"type":"codeVoice","code":"@Bindable"},{"text":" property wrapper, or ","type":"text"},{"code":"@Perception.Bindable","type":"codeVoice"},{"text":" if you are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"targeting older platforms."}]}],"type":"aside"}],"code":"02-02-01-code-0006.swift","runtimePreview":null},{"type":"step","caption":[],"code":"02-02-01-code-0007.swift","media":null,"content":[{"inlineContent":[{"type":"text","text":"Add a button to each row of the contacts list in order to send the "},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" "},{"text":"action to the store.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"media":"ch02-sub02-sec01-0000.mov","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the app in the preview to see that deletion works as expected. After tapping the trash"},{"text":" ","type":"text"},{"text":"icon, an alert shows, and if you confirm deletion the item is removed from the list.","type":"text"}]}],"code":null,"caption":[],"type":"step","runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"We’ve now added a new feature, that of deleting a contact, but unfortunately our domain","type":"text"},{"type":"text","text":" "},{"text":"is not modeled as concisely as it could be.","type":"text"}]}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Let’s add a new feature to the contacts list that allows you to delete a contact, but first"},{"type":"text","text":" "},{"text":"you must confirm deletion. We will implement the confirmation step using an alert. The tools","type":"text"},{"type":"text","text":" "},{"text":"that we used last section, such as ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"reference","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"text":" and","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","type":"reference","isActive":true},{"type":"text","text":", all work"},{"type":"text","text":" "},{"text":"for presenting alerts from optional state too.","type":"text"}],"type":"paragraph"}]}],"anchor":"Delete-contacts"},{"title":"Improve domain modeling","stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Define a new reducer, called "},{"type":"codeVoice","code":"Destination"},{"text":", nested inside the ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":". This"},{"text":" ","type":"text"},{"text":"reducer will hold the domain and logic for every feature that can be navigated to from","type":"text"},{"type":"text","text":" "},{"text":"the contacts feature, and as such it will be an enum.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"02-02-02-code-0000.swift","media":null,"runtimePreview":null,"type":"step"},{"type":"step","media":null,"code":"02-02-02-code-0001.swift","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add a case for for the “Add contact” feature. Note that we are holding onto the actual","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"AddContactFeature"},{"text":" reducer in the case, not the state. The","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro will fill in all the requirements for the reducer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"protocol for us automatically."}]}]},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add another case to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" for the alert state that can be displayed in the"},{"type":"text","text":" "},{"type":"text","text":"feature."}],"type":"paragraph"}],"type":"step","caption":[],"code":"02-02-02-code-0002.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to define a single reducer that combines multiple mutually exclusive"},{"text":" ","type":"text"},{"text":"reducers together. You can expand the macro code in Xcode to see all the code that is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"being written for you. And if in the future this feature can navigate to another feature,"},{"type":"text","text":" "},{"type":"text","text":"you will only have to add a single case to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" enum."}]},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Replace the two pieces of optional "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"reference","isActive":true},{"type":"text","text":" with a single"},{"text":" ","type":"text"},{"type":"text","text":"optional pointed at "},{"type":"codeVoice","code":"Destination.State"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"step","media":null,"code":"02-02-02-code-0003.swift","runtimePreview":null},{"inlineContent":[{"type":"text","text":"Note that this now creates a compilation error letting you know that "},{"type":"codeVoice","code":"ContactsFeature.State"},{"type":"text","text":" "},{"type":"text","text":"is no longer "},{"code":"Equatable","type":"codeVoice"},{"text":". This is happening because ","type":"text"},{"type":"codeVoice","code":"Destination.State"},{"type":"text","text":" is not "},{"type":"codeVoice","code":"Equatable"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and that type is generated by the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"overridingTitle":"@Reducer","overridingTitleInlineContent":[{"type":"codeVoice","code":"@Reducer"}]},{"text":" macro.","type":"text"}],"type":"paragraph"},{"code":"02-02-02-code-0004.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extend the macro-generated "},{"code":"Destination.State","type":"codeVoice"},{"type":"text","text":" to apply an "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" conformance."}]}],"caption":[],"runtimePreview":null,"type":"step"},{"caption":[],"type":"step","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Replace the two action cases that held onto ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"with a single case that holds onto "},{"type":"codeVoice","code":"Destination.Action"},{"text":".","type":"text"}],"type":"paragraph"}],"code":"02-02-02-code-0005.swift"},{"type":"paragraph","inlineContent":[{"text":"Now our model is more concisely defined, and we have compile time guarantees that only","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one destination can be active at a time. But, also now have a lot of compiler errors we need"},{"type":"text","text":" "},{"type":"text","text":"to fix."}]},{"runtimePreview":null,"code":"02-02-02-code-0006.swift","caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Instead of populating a piece of "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" optional state in order to drive navigation"},{"text":" ","type":"text"},{"type":"text","text":"to that feature, we will now mutate "},{"type":"codeVoice","code":"destination"},{"text":" to point it to the ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" case.","type":"text"}],"type":"paragraph"}],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"And when listening for actions happening in child domains we now need to destructure the","type":"text"},{"type":"text","text":" "},{"code":".destination(.presented(_))","type":"codeVoice"},{"type":"text","text":" case, such as when the “Add Contact” feature tells us to"},{"text":" ","type":"text"},{"text":"save the contact.","type":"text"}]}],"runtimePreview":null,"media":null,"type":"step","caption":[],"code":"02-02-02-code-0007.swift"},{"media":null,"runtimePreview":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And when the alert confirms deletion of the contact."}]}],"code":"02-02-02-code-0008.swift"},{"code":"02-02-02-code-0009.swift","type":"step","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We can handle all other destination actions by simply returning a ","type":"text"},{"code":".none","type":"codeVoice"},{"text":" effect to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represent there is no other work to perform."}]}],"caption":[]},{"caption":[],"media":null,"code":"02-02-02-code-0010.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Update the state mutation for showing an alert to instead point the ","type":"text"},{"type":"codeVoice","code":"destination"},{"text":" to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"alert"},{"text":" case.","type":"text"}]}]},{"caption":[],"code":"02-02-02-code-0011.swift","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":"s that were used at the bottom of the reducer with a single one that"},{"text":" ","type":"text"},{"type":"text","text":"is focused on the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" domain. It is not even necessary to specify the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" type in this expression because it can be inferred from how the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" "},{"text":"macro was applied to the ","type":"text"},{"code":"Destination","type":"codeVoice"},{"type":"text","text":" enum."}]}],"runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"That’s all it takes to convert two independent, imprecisely modeled optional values into a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"single optional enum, and we can now prove that only one destination can be active at a time."},{"text":" ","type":"text"},{"type":"text","text":"All that is left is to update the view so that we can specify which case of the destination"},{"type":"text","text":" "},{"text":"enum drives the sheet and alert.","type":"text"}]},{"media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When you model all of your destinations in a single optional value, you start by scoping to"},{"type":"text","text":" "},{"text":"the destination domain and then you further scope into the state and action cases","type":"text"},{"text":" ","type":"text"},{"text":"associated with the specific destination using familiar key path dot-chaining syntax. This","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can be done with familiar dot syntax because the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" macro applies the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro to each enum.","type":"text"}]}],"caption":[],"code":"02-02-02-code-0012.swift"},{"caption":[],"type":"step","code":"02-02-02-code-0013.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The same can be done for the "},{"type":"codeVoice","code":"alert"},{"text":" view modifier.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"That completes the refactor of the reducer and view to use a single piece of optional enum","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state instead using multiple optional values. The application works exactly as it did before,"},{"type":"text","text":" "},{"text":"but now its domain is more concisely modeled.","type":"text"}]}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Currently the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" can navigate to two possible destinations: either the “Add"},{"type":"text","text":" "},{"text":"Contact” sheet or the delete alert. Importantly, it is not possible to be navigated to both","type":"text"},{"text":" ","type":"text"},{"text":"destinations at once. However, that currently is possible since we are representing each of","type":"text"},{"text":" ","type":"text"},{"text":"those destinations as optional pieces of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The number of invalid states explodes exponentially when you use optionals to represent"},{"text":" ","type":"text"},{"text":"features you can navigate to. For example, 2 optionals has 1 invalid state, but 3 optionals","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"has 4 invalid states, and 4 optionals has 11 invalid states. This imprecise domain modeling"},{"type":"text","text":" "},{"text":"leaks complexity into your application since you can never truly know which feature is being","type":"text"},{"type":"text","text":" "},{"type":"text","text":"presented."}],"type":"paragraph"},{"inlineContent":[{"text":"Let’s see how to more concisely model our domains for navigating to multiple destinations.","type":"text"}],"type":"paragraph"}]}],"anchor":"Improve-domain-modeling"}]},{"featuredEyebrow":"Tutorial","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"title":"Testing presentation","kind":"callToAction","action":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","type":"reference","isActive":true,"overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}]}}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"project","identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","interfaceLanguage":"swift"},"variants":[{"paths":["\/tutorials\/composablearchitecture\/02-02-multipledestinations"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"category":"The Composable Architecture","role":"project","title":"Multiple presentation destinations","categoryPathComponent":"MeetComposableArchitecture"},"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]],"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","url":"\/documentation\/composablearchitecture\/store","title":"Store","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","title":"Testing state changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"type":"section","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"type":"section","title":"Performing a network request","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"type":"section","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","title":"Testing effects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"type":"topic","title":"Your first presentation","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"role":"project","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","type":"section","kind":"section","title":"Managing a timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Presents","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Wraps a property with "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"type":"text","text":" and observes it."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","kind":"symbol","url":"\/documentation\/composablearchitecture\/presents()","type":"topic","title":"Presents()","role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"type":"section","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"text":"PresentationState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"DestinationAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"destination","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"kind":"text","text":">\n"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:filepath:line:column:)-4ub6q","type":"topic","title":"ifLet(_:action:destination:fileID:filePath:line:column:)","role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"title":"Drill-down to contact detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"kind":"project","title":"Composing features","role":"project","type":"topic","estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"type":"topic","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/navigation","role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","title":"Navigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"type":"section","title":"Create a reducer","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"type":"section","title":"Child-to-parent communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"02-02-01-code-0004.swift":{"syntax":"swift","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"identifier":"02-02-01-code-0004.swift","fileName":"ContactsFeatures.swift","type":"file","highlights":[{"line":48}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","type":"section","kind":"section","title":"Contact detail feature","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},"02-02-02-code-0012.swift":{"content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":15},{"line":32}],"identifier":"02-02-02-code-0012.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"type":"section","title":"Adding a tab view","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"type":"section","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"02-02-02-code-0003.swift":{"syntax":"swift","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    \/\/ @Presents var addContact: AddContactFeature.State?","    \/\/ @Presents var alert: AlertState<Action.Alert>?","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"identifier":"02-02-02-code-0003.swift","fileName":"ContactsFeatures.swift","type":"file","highlights":[{"line":6},{"line":7},{"line":8}]},"02-02-02-code-0006.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23}],"identifier":"02-02-02-code-0006.swift"},"ch02-sub02-sec01-0000.mov":{"alt":null,"poster":null,"identifier":"ch02-sub02-sec01-0000.mov","type":"video","variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/ch02-sub02-sec01-0000.mov"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PresentationAction","kind":"identifier"}],"abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction","type":"topic","title":"PresentationAction","role":"symbol","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}]},"02-02-02-code-0001.swift":{"content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":4}],"identifier":"02-02-02-code-0001.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","type":"section","kind":"section","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"kind":"symbol","title":"Reducer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"type":"topic","title":"Multiple presentation destinations","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}],"role":"project","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations"},"02-02-02-code-0008.swift":{"syntax":"swift","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"identifier":"02-02-02-code-0008.swift","fileName":"ContactsFeatures.swift","type":"file","highlights":[{"line":31}]},"02-02-01-code-0007.swift":{"content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.addContact, action: \\.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"identifier":"02-02-01-code-0007.swift"},"02-02-02-code-0013.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"identifier":"02-02-02-code-0013.swift","fileName":"ContactsFeatures.swift","type":"file","highlights":[{"line":38}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"url":"\/documentation\/composablearchitecture\/reducer()","type":"topic","kind":"symbol","title":"Reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for a type.","type":"text"}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},"02-02-01-code-0003.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41}],"identifier":"02-02-01-code-0003.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"url":"\/documentation\/composablearchitecture\/presentationstate","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","role":"symbol","kind":"symbol","title":"PresentationState","type":"topic","abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}]},"02-02-02-code-0010.swift":{"syntax":"swift","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"identifier":"02-02-02-code-0010.swift","fileName":"ContactsFeatures.swift","type":"file","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":47}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","type":"topic","kind":"project","title":"Testing presentation","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"role":"project","estimatedTime":"40min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},"02-02-01-code-0001.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":6},{"line":13},{"line":14}],"identifier":"02-02-01-code-0001.swift"},"02-02-02-code-0004.swift":{"syntax":"swift","highlights":[{"line":8}],"content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","    case alert(AlertState<ContactsFeature.Action.Alert>)","  }","}","extension ContactsFeature.Destination.State: Equatable {}"],"identifier":"02-02-02-code-0004.swift","fileName":"ContactsFeatures.swift","type":"file","fileType":"swift"},"02-02-02-code-0002.swift":{"identifier":"02-02-02-code-0002.swift","highlights":[{"line":5}],"content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","    case alert(AlertState<ContactsFeature.Action.Alert>)","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"type":"section","title":"Integrate views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"type":"section","title":"Deleting a contact","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"02-02-01-code-0006.swift":{"syntax":"swift","fileType":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          Text(contact.name)","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.addContact, action: \\.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"],"identifier":"02-02-01-code-0006.swift","fileName":"ContactsFeatures.swift","type":"file","highlights":[{"line":29}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"type":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"title":"What is a side effect?","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","type":"section","kind":"section","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"},"02-02-02-code-0011.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":51}],"identifier":"02-02-02-code-0011.swift"},"02-02-02-code-0009.swift":{"syntax":"swift","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"identifier":"02-02-02-code-0009.swift","fileName":"ContactsFeatures.swift","type":"file","highlights":[{"line":35},{"line":36},{"line":37}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","type":"section","kind":"section","title":"Deriving child stores","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"text":" ","type":"text"},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","type":"section","kind":"section","title":"Composing reducers","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","type":"topic","kind":"project","title":"Testing your feature","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"role":"project","estimatedTime":"1hr 0min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},"02-02-02-code-0000.swift":{"content":["extension ContactsFeature {","  @Reducer","  enum Destination {","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[],"identifier":"02-02-02-code-0000.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"type":"section","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"type":"topic","title":"Essentials","abstract":[],"role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","url":"\/tutorials\/meetcomposablearchitecture\/essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","type":"section","kind":"section","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"},"02-02-01-code-0002.swift":{"syntax":"swift","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-02-01-code-0002.swift","fileName":"ContactsFeatures.swift","type":"file","highlights":[{"line":12},{"line":15}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","type":"topic","kind":"project","title":"Adding side effects","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"role":"project","estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},"02-02-02-code-0007.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":27}],"identifier":"02-02-02-code-0007.swift"},"02-02-01-code-0000.swift":{"syntax":"swift","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-02-01-code-0000.swift","fileName":"ContactsFeatures.swift","type":"file","highlights":[{"line":11},{"line":28},{"line":29},{"line":30}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"type":"topic","title":"Your first feature","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"role":"project","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","estimatedTime":"20min","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"02-02-01-code-0005.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}],"identifier":"02-02-01-code-0005.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","type":"topic","kind":"project","title":"Navigation stacks","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"project","estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"url":"\/tutorials\/meetcomposablearchitecture","type":"topic","kind":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture"},"02-02-02-code-0005.swift":{"syntax":"swift","fileType":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    \/\/ case addContact(PresentationAction<AddContactFeature.Action>)","    \/\/ case alert(PresentationAction<Alert>)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"identifier":"02-02-02-code-0005.swift","fileName":"ContactsFeatures.swift","type":"file","highlights":[{"line":11},{"line":12},{"line":13}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","type":"section","kind":"section","title":"Improve domain modeling","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","type":"section","kind":"section","title":"Delete contacts","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"text":" features.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","type":"section","kind":"section","title":"Testing the add contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"}}}