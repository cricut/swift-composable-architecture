{"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/Reducer-Implementations"]]},"metadata":{"modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Instance Method","title":"dependency(_:_:)","role":"symbol","externalID":"s:22ComposableArchitecture7ReducerPAAE10dependencyyAA021_DependencyKeyWritingC0VyxGs08WritableF4PathCy12Dependencies0E6ValuesVqd__G_qd__tlF::SYNTHESIZED::s:22ComposableArchitecture5ScopeV","extendedModule":"ComposableArchitecture","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/dependency(_:_:)","interfaceLanguage":"swift"},"abstract":[{"text":"Sets the dependency value of the specified key path to the given value.","type":"text"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/scope\/dependency(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@warn_unqualified_access"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dependency"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"keyPath"},{"text":": ","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"keyPath","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path that indicates the property of the "},{"code":"DependencyValues","type":"codeVoice"},{"text":" structure to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"update."}]}]},{"name":"value","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The new value to set for the item specified by "},{"code":"keyPath","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"content":[{"anchor":"return-value","level":2,"text":"Return Value","type":"heading"},{"inlineContent":[{"text":"A reducer that has the given value set in its dependencies.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This overrides the dependency specified by ","type":"text"},{"type":"codeVoice","code":"keyPath"},{"type":"text","text":" for the execution of the receiving"},{"type":"text","text":" "},{"text":"reducer ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"text":" all of its effects. It can be useful for altering the dependencies for just","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one portion of your application, while letting the rest of the application continue using the"},{"text":" ","type":"text"},{"text":"default live dependencies.","type":"text"}]},{"inlineContent":[{"text":"For example, suppose you are creating an onboarding experience to teach people how to use one","type":"text"},{"text":" ","type":"text"},{"text":"of your features. This can be done by constructing a new reducer that embeds the core","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature’s domain and layers on additional logic:"}],"type":"paragraph"},{"code":["@Reducer","struct Onboarding {","  struct State {","    var feature: Feature.State","    \/\/ Additional onboarding state","  }","  enum Action {","    case feature(Feature.Action)","    \/\/ Additional onboarding actions","  }","","  var body: some Reducer<State, Action> {","    Scope(state: \\.feature, action: \\.feature) {","      Feature()","    }","","    Reduce { state, action in","      \/\/ Additional onboarding logic","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This can work just fine, but the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"text":" reducer will have access to all of the live","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dependencies by default, and that might not be ideal. For example, the "},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" reducer"},{"text":" ","type":"text"},{"type":"text","text":"may need to make API requests and read\/write from user defaults. It may be preferable"},{"type":"text","text":" "},{"type":"text","text":"to run the "},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" reducer in an alternative environment for onboarding purposes, such"},{"type":"text","text":" "},{"text":"as an API client that returns some mock data or an in-memory user defaults so that the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"onboarding experience doesn’t accidentally trample on shared data."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be by using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/dependency(_:_:)","isActive":true},{"type":"text","text":" method to override those dependencies"},{"type":"text","text":" "},{"text":"just for the ","type":"text"},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" reducer and its effects:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some Reducer<State, Action> {","  Scope(state: \\.feature, action: \\.feature) {","    Feature()","      .dependency(\\.apiClient, .mock)","      .dependency(\\.userDefaults, .mock)","  }","","  Reduce { state, action in","    \/\/ Additional onboarding logic","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/transformDependency(_:transform:)","isActive":true},{"text":" for a similar method that can inspect and modify the","type":"text"},{"text":" ","type":"text"},{"text":"current dependency when overriding.","type":"text"}]}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/dependency(_:_:)":{"url":"\/documentation\/composablearchitecture\/scope\/dependency(_:_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/dependency(_:_:)","kind":"symbol","title":"dependency(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier","text":"DependencyValues"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Value"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"role":"symbol","abstract":[{"type":"text","text":"Sets the dependency value of the specified key path to the given value."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/transformDependency(_:transform:)":{"url":"\/documentation\/composablearchitecture\/scope\/transformdependency(_:transform:)","title":"transformDependency(_:transform:)","abstract":[{"type":"text","text":"Transform a reducer’s dependency value at the specified key path with the given function."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/transformDependency(_:transform:)","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"transformDependency","kind":"identifier"},{"kind":"text","text":"<"},{"text":"V","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier","text":"WritableKeyPath"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier","text":"DependencyValues"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"text":">, ","kind":"text"},{"text":"transform","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"kind":"symbol","title":"Reducer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/reducer","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/scope","navigatorTitle":[{"text":"Scope","kind":"identifier"}],"title":"Scope","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"type":"topic","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","type":"topic","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","role":"collection","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/Reducer-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/Reducer-Implementations","url":"\/documentation\/composablearchitecture\/scope\/reducer-implementations","title":"Reducer Implementations","type":"topic","kind":"article","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/effect","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Effect"}]}}}